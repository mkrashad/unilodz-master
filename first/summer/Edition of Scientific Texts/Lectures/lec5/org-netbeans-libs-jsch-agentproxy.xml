error(err);
  }

  return [];
}

function propIterator(props, object, max) {
  if (object.preview && Object.keys(object.preview).includes("wrappedValue")) {
    const {
      Rep
    } = __webpack_require__(24);

    return [Rep({
      object: object.preview.wrappedValue,
      mode: props.mode || MODE.TINY,
      defaultRep: Grip
    })];
  } // Property filter. Show only interesting properties to the user.


  const isInterestingProp = props.isInterestingProp || ((type, value) => {
    return type == "boolean" || type == "number" || type == "string" && value.length != 0;
  });

  let properties = object.preview ? object.preview.ownProperties || {} : {};
  const propertiesLength = getPropertiesLength(object);

  if (object.preview && object.preview.safeGetterValues) {
    properties = { ...properties,
      ...object.preview.safeGetterValues
    };
  }

  let indexes = getPropIndexes(properties, max, isInterestingProp);

  if (indexes.length < max && indexes.length < propertiesLength) {
    // There ar